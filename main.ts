import * as axios from "axios";
import { faker } from "@faker-js/faker";
import * as https from "https";

/**
 * DOCUMENTATION
 * @param {Promise<void>} SEED_DATA - This method creates a POST request to the specified endpoint.
 * @param {axios.AxiosInstance} INSTANCE - This field represents an axios INSTANCE and it's config defaults
 * @param {string} TOKEN - This field refers to the Token generated by your API/Back End service
 * @param {URL} URL - This field refers to the specified endpoint.
 */

class DB_OPERATIONS {
    /* Create axios instance */
    INSTANCE = axios.default.create({
        /* ... other options ... */
        httpsAgent: new https.Agent({
            rejectUnauthorized: false,
        }),
    });

    /* Accessible fields */
    TOKEN: string = "YOUR_TOKEN";
    URL = new URL("https://localhost:5001/resources");

    async SEED_DATA() {
        try {
            for (let i = 0; i < 100; i++) {

                const payload = {
                    startDTM: "2023-07-26T21:00:00.000Z",
                    endDTM: "2023-10-26T21:00:00.000Z",
                    firstName: faker.person.firstName(),
                    lastName: faker.person.lastName(),
                    email: faker.internet.email(),
                    /* 
                    
                    Implement Ids using an array in future releases e.g 
                
                        let resourceTypeIds: string[] = [
                            '9c480954-f4a0-4560-ae87-9da1bf47a676', 
                            '45b8224f-97b5-4fc1-810f-43e6fe94a87d',
                            '4e5bbade-a8da-4afb-a397-dd13b3ef20b9'
                        ]
    
                        let resourceLevelds: string[] = [
                            '9c480954-f4a0-4560-ae87-9da1bf47a676', 
                            '45b8224f-97b5-4fc1-810f-43e6fe94a87d',
                            '4e5bbade-a8da-4afb-a397-dd13b3ef20b9'
                        ]
    
                        let locationIds: string[] = [
                            '9c480954-f4a0-4560-ae87-9da1bf47a676', 
                            '45b8224f-97b5-4fc1-810f-43e6fe94a87d',
                            '4e5bbade-a8da-4afb-a397-dd13b3ef20b9'
                        ]
    
                    Then set the current value on iteration.
    
                    */
                    resourceTypeId: "9c480954-f4a0-4560-ae87-9da1bf47a676",
                    resourceLevelId: "3b56aa69-82d9-4953-8283-888fdd7d7896",
                    locationId: "092ca8fb-edd0-4cb7-9e45-e7af50a8aabf",
                };

                /* Response format */
                const respose = await this.INSTANCE.post(this.URL.href, payload, {
                    headers: {
                        Authorization: `Bearer ${this.TOKEN}`,
                        Server: "Kestrel",
                        Accept: "*/*",
                    },
                });

                console.log(`RESPONSE STATUS: ${respose.status}`);
            }
        } catch (error) {
            console.log(`ERROR:, ${error.Message}`);
        }
    }
}

const dbContext = new DB_OPERATIONS();
dbContext.SEED_DATA();